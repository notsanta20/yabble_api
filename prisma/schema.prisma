generator client {
  provider = "prisma-client-js"
  output   = "./generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("LOCAL_DATABASE_URL")
}

model User {
  id              String        @id @default(uuid())
  username        String
  email           String
  salt            String
  hash            String
  bio             String?
  profilePic      String?
  Posts           Posts[]
  Likes           Likes[]
  Comments        Comments[]
  myRequests      Requests[]    @relation("userA")
  userRequests    Requests[]    @relation("userB")
  myFriends       FriendsList[] @relation("user")
  followers       FriendsList[] @relation("friend")
  messageSent     Messages[]    @relation("sender")
  messageReceived Messages[]    @relation("receiver")
  session         Session?
}

model Posts {
  id          String     @id @default(uuid())
  title       String
  description String?
  image       String?
  time        DateTime   @default(now())
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  Likes       Likes[]
  Comments    Comments[]
}

model Likes {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId String
  Posts  Posts  @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Comments {
  id      String   @id @default(uuid())
  comment String
  time    DateTime @default(now())
  userId  String
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId  String
  Posts   Posts    @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Requests {
  id      String @id @default(uuid())
  userAId String
  userA   User   @relation("userA", fields: [userAId], references: [id], onDelete: Cascade)
  userBId String
  userB   User   @relation("userB", fields: [userBId], references: [id], onDelete: Cascade)
}

model FriendsList {
  id       String     @id @default(uuid())
  userAId  String
  userA    User       @relation("user", fields: [userAId], references: [id], onDelete: Cascade)
  userBId  String
  userB    User       @relation("friend", fields: [userBId], references: [id], onDelete: Cascade)
  messages Messages[]
}

model Messages {
  id         String      @id @default(uuid())
  message    String?
  image      String?
  time       DateTime    @default(now())
  sender     User        @relation("sender", fields: [senderId], references: [id], onDelete: Cascade)
  senderId   String
  receiver   User        @relation("receiver", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId String
  contact    FriendsList @relation(fields: [contactId], references: [id], onDelete: Cascade)
  contactId  String
}

model Session {
  id     String   @id @default(uuid())
  time   DateTime @default(now())
  userId String   @unique
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
